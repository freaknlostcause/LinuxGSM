# This is a basic workflow to help you get started with Actions

name: mcserver

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on: push

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
      with:
          node-version: '14'
    - run: npm install gamedig -g
    # Runs a single command using the runners shell
    - name: linuxgsm.sh pre-test setup
      run: chmod +x lgsm/functions/*
    - name: ./linuxgsm.sh (get-opt)
      run: bash ./linuxgsm.sh
    - name: ./linuxgsm.sh list
      run: bash ./linuxgsm.sh list
    - name: ./linuxgsm.sh mcserver
      run: bash ./linuxgsm.sh mcserver
    - name: ./mcserver (get-opt)
      run: bash ./mcserver
    - name: ./mcserver dev
      run: bash ./mcserver dev
    # Install
    - name: ./mcserver auto-install
      run: bash ./mcserver auto-install
    # Speed up messages
    - name: Speed up message display
      run: echo "sleeptime=\"0.1\"" > lgsm/config-lgsm/mcserver/common.cfg
    # Start. Stop, Restart
    - name: ./mcserver start (no ip set)
      run: bash ./mcserver start
    - name: ./mcserver start (already online)
      run: bash .github/exitcode.sh "./mcserver start" "2"
    - name: ./mcserver restart
      run: bash ./mcserver restart
    - name: ./mcserver stop
      run: bash ./mcserver stop
    - name: ./mcserver restart (server offline)
      run: bash ./mcserver restart
    # update
    - name: ./mcserver update (no update required)
      run: bash ./mcserver update
    - name: ./mcserver update (update required - online)
      run: |
        bash ./mcserver update
    - name: Simulate out-of-date modules
      run: |
        echo "#test" >> lgsm/tmp/linuxgsm.sh
        echo "#test" >> lgsm/config-default/config-lgsm/mcserver/_default.cfg
        echo "#test" >> lgsm/functions/alert.sh
    - name: ./mcserver update-lgsm
      run: bash ./mcserver update-lgsm
    # monitor
    - name: ./mcserver monitor (offline)
      run: |
        bash ./mcserver stop
        bash .github/exitcode.sh "./mcserver monitor" "2"
    - name: ./mcserver monitor (offline with lockfile)
      run: |
        date '+%s' > "lgsm/lock/mcserver.lock"
        bash ./mcserver monitor
    - name: ./mcserver monitor (online)
      run: |
        bash ./mcserver monitor
    - name: ./mcserver test-alert
      run: |
        bash .github/exitcode.sh "./mcserver test-alert" "3"
    # details
    - name: ./mcserver details
      run: bash ./mcserver details
    - name: ./mcserver postdetails
      run: bash ./mcserver postdetails
    # Backup
    - name: ./mcserver backup
      run: bash ./mcserver backup
    # Dev Tools
    - name: ./mcserver detect-glibc
      run: bash ./mcserver detect-glibc
    - name: ./mcserver detect-ldd
      run: bash ./mcserver detect-ldd
    - name: ./mcserver detect-deps
      run: bash ./mcserver detect-deps
    - name: ./mcserver query-raw
      run: bash ./mcserver query-raw
    # Donate
    - name: ./mcserver donate
      run: bash ./mcserver donate
